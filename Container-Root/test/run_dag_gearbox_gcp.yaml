
# Example of loops using DAGs
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: hypertune-p-gearbox-
spec:
  entrypoint: hypertune-loops-dag

  arguments:
    parameters:
    - name: arch
      value: nvidia-tesla-v100
    - name: main-model
      value: gearbox

  volumes:
  - name: workdir
    hostPath:
      # path: /mnt/bhge/data/hypertune/gearbox
      path: /fileshare/dsa-kf2-data/hypertune/equinor/gearbox
      type: Directory
    # persistentVolumeClaim:
    #   claimName: pvc-dorothy-kf9-p-gearbox

  templates:
  - name: hypertune-loops-dag
    dag:
      tasks:
      #- name: bayesopt-init
      #  template: hypertune
      #  arguments:
      #    parameters:
      #    - {name: num, value: "init"}
      #    - {name: cases, value: ""}
      - name: dlrun-init
        #  dependencies: [bayesopt-init]
        template: dlmodel
        arguments:
          parameters:
          - {name: num, value: "{{item}}"}
        withItems: ['0_0,0_1', '0_2,0_3', '0_4,1_0', '1_1,1_2', '1_3,1_4', '2_0,2_1', '2_2,2_3', '2_4,3_0', '3_1,3_2', '3_3,3_4', '4_0,4_1', '4_2,4_3', '4_4,5_0', '5_1,5_2', '5_3,5_4','6_0,6_1', '6_2,6_3', '6_4,7_0', '7_1,7_2', '7_3,7_4', '8_0,8_1', '8_2,8_3', '8_4,9_0', '9_1,9_2', '9_3,9_4', '10_0,10_1', '10_2,10_3', '10_4,11_0', '11_1,11_2', '11_3,11_4', '12_0,12_1', '12_2,12_3', '12_4,13_0', '13_1,13_2', '13_3,13_4', '14_0,14_1', '14_2,14_3', '14_4,15_0', '15_1,15_2', '15_3,15_4', '16_0,16_1', '16_2,16_3', '16_4,17_0', '17_1,17_2', '17_3,17_4', '18_0,18_1', '18_2,18_3', '18_4,19_0', '19_1,19_2', '19_3,19_4', '20_0,20_1', '20_2,20_3', '20_4,21_0', '21_1,21_2', '21_3,21_4', '22_0,22_1', '22_2,22_3', '22_4,23_0', '23_1,23_2', '23_3,23_4']

      - name: bayesopt0
        dependencies: [dlrun-init]
        template: hypertune
        arguments:
          parameters:
          - {name: num, value: "iter_0"}
          - {name: cases, value: "0_0 0_1 0_2 0_3 0_4 1_0 1_1 1_2 1_3 1_4 2_0 2_1 2_2 2_3 2_4 3_0 3_1 3_2 3_3 3_4 4_0 4_1 4_2 4_3 4_4 5_0 5_1 5_2 5_3 5_4 6_0 6_1 6_2 6_3 6_4 7_0 7_1 7_2 7_3 7_4 8_0 8_1 8_2 8_3 8_4 9_0 9_1 9_2 9_3 9_4 10_0 10_1 10_2 10_3 10_4 11_0 11_1 11_2 11_3 11_4 12_0 12_1 12_2 12_3 12_4 13_0 13_1 13_2 13_3 13_4 14_0 14_1 14_2 14_3 14_4 15_0 15_1 15_2 15_3 15_4 16_0 16_1 16_2 16_3 16_4 17_0 17_1 17_2 17_3 17_4 18_0 18_1 18_2 18_3 18_4 19_0 19_1 19_2 19_3 19_4 20_0 20_1 20_2 20_3 20_4 21_0 21_1 21_2 21_3 21_4 22_0 22_1 22_2 22_3 22_4 23_0 23_1 23_2 23_3 23_4"}

      - name: dlrun0
        dependencies: [bayesopt0]
        template: dlmodel
        arguments:
          parameters:
          - {name: num, value: "{{item}}"}
        withItems: ['24_0,24_1', '24_2,24_3', '24_4,25_0', '25_1,25_2', '25_3,25_4', '26_0,26_1', '26_2,26_3', '26_4,27_0', '27_1,27_2', '27_3,27_4', '28_0,28_1', '28_2,28_3', '28_4,29_0', '29_1,29_2', '29_3,29_4']

      - name: bayesopt1
        dependencies: [dlrun0]
        template: hypertune
        arguments:
          parameters:
          - {name: num, value: "iter_1"}
          - {name: cases, value: "24_0 24_1 24_2 24_3 24_4 25_0 25_1 25_2 25_3 25_4 26_0 26_1 26_2 26_3 26_4 27_0 27_1 27_2 27_3 27_4 28_0 28_1 28_2 28_3 28_4 29_0 29_1 29_2 29_3 29_4"}

      - name: dlrun1
        dependencies: [bayesopt1]
        template: dlmodel
        arguments:
          parameters:
          - {name: num, value: "{{item}}"}
        withItems: ['30_0,30_1', '30_2,30_3', '30_4,31_0', '31_1,31_2', '31_3,31_4', '32_0,32_1', '32_2,32_3', '32_4,33_0', '33_1,33_2', '33_3,33_4', '34_0,34_1', '34_2,34_3', '34_4,35_0', '35_1,35_2', '35_3,35_4']

      - name: bayesopt2
        dependencies: [dlrun1]
        template: hypertune
        arguments:
          parameters:
          - {name: num, value: "iter_2"}
          - {name: cases, value: "30_0 30_1 30_2 30_3 30_4 31_0 31_1 31_2 31_3 31_4 32_0 32_1 32_2 32_3 32_4 33_0 33_1 33_2 33_3 33_4 34_0 34_1 34_2 34_3 34_4 35_0 35_1 35_2 35_3 35_4"}

      - name: dlrun2
        dependencies: [bayesopt2]
        template: dlmodel
        arguments:
          parameters:
          - {name: num, value: "{{item}}"}
        withItems: ['36_0,36_1', '36_2,36_3', '36_4,37_0', '37_1,37_2', '37_3,37_4', '38_0,38_1', '38_2,38_3', '38_4,39_0', '39_1,39_2', '39_3,39_4', '40_0,40_1', '40_2,40_3', '40_4,41_0', '41_1,41_2', '41_3,41_4']

      - name: bayesopt3
        dependencies: [dlrun2]
        template: hypertune
        arguments:
          parameters:
          - {name: num, value: "iter_3"}
          - {name: cases, value: "36_0 36_1 36_2 36_3 36_4 37_0 37_1 37_2 37_3 37_4 38_0 38_1 38_2 38_3 38_4 39_0 39_1 39_2 39_3 39_4 40_0 40_1 40_2 40_3 40_4 41_0 41_1 41_2 41_3 41_4"}

      - name: dlrun3
        dependencies: [bayesopt3]
        template: dlmodel
        arguments:
          parameters:
          - {name: num, value: "{{item}}"}
        withItems: ['42_0,42_1', '42_2,42_3', '42_4,43_0', '43_1,43_2', '43_3,43_4', '44_0,44_1', '44_2,44_3', '44_4,45_0', '45_1,45_2', '45_3,45_4', '46_0,46_1', '46_2,46_3', '46_4,47_0', '47_1,47_2', '47_3,47_4']

      - name: bayesopt4
        dependencies: [dlrun3]
        template: hypertune
        arguments:
          parameters:
          - {name: num, value: "iter_4"}
          - {name: cases, value: "42_0 42_1 42_2 42_3 42_4 43_0 43_1 43_2 43_3 43_4 44_0 44_1 44_2 44_3 44_4 45_0 45_1 45_2 45_3 45_4 46_0 46_1 46_2 46_3 46_4 47_0 47_1 47_2 47_3 47_4"}

  - name: hypertune
    activeDeadlineSeconds: 100000
    inputs:
      parameters:
      - name: num
      - name: cases
    container:
      image: registry.demo.bhge.ai/dsa/demo/hypertune/bayesgp:GTC-2019-DEMO
      imagePullPolicy: Always
      command: [bash, -c]
      # export WORKDIR=\"{{workflow.parameters.main-model}}\";
      args: ["
            df -h;
            cd /hostfiles/;
            pwd;
            source utility_functions.sh;
            run_list=\"{{inputs.parameters.cases}}\";
            opt_step=\"{{inputs.parameters.num}}\";
            if [ $opt_step == \"init\" ]; then
                run_bayesopt \"init\" \"init_0\";
            else
                process_files \"$run_list\";
                run_bayesopt_all_steps $opt_step;
            fi "]
      volumeMounts:
      - name: workdir
        mountPath: /hostfiles/
      resources:
        limits:
          nvidia.com/gpu: 1 # from Allocatable: using kubectl describe node <machine instance with gpu>

  - name: dlmodel
    inputs:
      parameters:
      - name: num
    activeDeadlineSeconds: 100000
    container:
      #ADD arguments for tensorflow docker ro run nvidia
      image: registry.demo.bhge.ai/dsa/demo/hypertune/tensorflow:latest-gpu-py3-keras
      imagePullPolicy: Always
      command: [bash, -c]
      # export WORKDIR=\"{{workflow.parameters.main-model}}\";
      args: ["
             df -h;
             cd /hostfiles/;
             pwd;
             source utility_functions.sh;
             submit_jobs_per_container  \"{{inputs.parameters.num}}\"   "]
      volumeMounts:
      - name: workdir
        mountPath: /hostfiles/
      resources:
        limits:
          nvidia.com/gpu: 1 # from Allocatable: using kubectl describe node <machine instance with gpu>
